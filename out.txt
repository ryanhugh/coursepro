http://localhost:3000
::ffff:127.0.0.1 /
null { _readableState: 
   { objectMode: false,
     highWaterMark: 16384,
     buffer: [],
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     defaultEncoding: 'utf8',
     ranOut: false,
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null,
     resumeScheduled: false },
  readable: false,
  domain: null,
  _events: 
   { end: [ [Function: responseOnEnd], [Function], [Function], [Function] ],
     close: [ [Function], [Function] ],
     data: [Function],
     error: [Function] },
  _maxListeners: undefined,
  socket: 
   { _connecting: false,
     _hadError: false,
     _handle: null,
     _parent: null,
     _host: 'localhost',
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: false,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        free: [Function: onFree],
        close: [Object],
        agentRemove: [Function: onRemove],
        drain: [Function: ondrain],
        error: [Object] },
     _maxListeners: 0,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: true,
        ended: true,
        finished: true,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: true,
        errorEmitted: false },
     writable: false,
     allowHalfOpen: false,
     destroyed: true,
     bytesRead: 3690,
     _bytesDispatched: 59,
     _pendingData: null,
     _pendingEncoding: '',
     parser: null,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: true,
        _hangupClose: false,
        _headerSent: true,
        socket: [Circular],
        connection: [Circular],
        _header: 'GET / HTTP/1.1\r\nhost: localhost:3000\r\nConnection: close\r\n\r\n',
        _headers: [Object],
        _headerNames: [Object],
        agent: [Object],
        socketPath: undefined,
        method: 'GET',
        path: '/',
        parser: null,
        res: [Circular] },
     read: [Function],
     _consuming: true,
     _idleNext: null,
     _idlePrev: null,
     _idleTimeout: -1 },
  connection: 
   { _connecting: false,
     _hadError: false,
     _handle: null,
     _parent: null,
     _host: 'localhost',
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: false,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        free: [Function: onFree],
        close: [Object],
        agentRemove: [Function: onRemove],
        drain: [Function: ondrain],
        error: [Object] },
     _maxListeners: 0,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: true,
        ended: true,
        finished: true,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: true,
        errorEmitted: false },
     writable: false,
     allowHalfOpen: false,
     destroyed: true,
     bytesRead: 3690,
     _bytesDispatched: 59,
     _pendingData: null,
     _pendingEncoding: '',
     parser: null,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: true,
        _hangupClose: false,
        _headerSent: true,
        socket: [Circular],
        connection: [Circular],
        _header: 'GET / HTTP/1.1\r\nhost: localhost:3000\r\nConnection: close\r\n\r\n',
        _headers: [Object],
        _headerNames: [Object],
        agent: [Object],
        socketPath: undefined,
        method: 'GET',
        path: '/',
        parser: null,
        res: [Circular] },
     read: [Function],
     _consuming: true,
     _idleNext: null,
     _idlePrev: null,
     _idleTimeout: -1 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers: 
   { 'x-powered-by': 'Express',
     'accept-ranges': 'bytes',
     'cache-control': 'public, max-age=0',
     'last-modified': 'Sun, 12 Jul 2015 05:58:10 GMT',
     etag: 'W/"d49-14e80d799b1"',
     'content-type': 'text/html; charset=UTF-8',
     'content-length': '3401',
     date: 'Sun, 12 Jul 2015 14:30:42 GMT',
     connection: 'close' },
  rawHeaders: 
   [ 'X-Powered-By',
     'Express',
     'Accept-Ranges',
     'bytes',
     'Cache-Control',
     'public, max-age=0',
     'Last-Modified',
     'Sun, 12 Jul 2015 05:58:10 GMT',
     'ETag',
     'W/"d49-14e80d799b1"',
     'Content-Type',
     'text/html; charset=UTF-8',
     'Content-Length',
     '3401',
     'Date',
     'Sun, 12 Jul 2015 14:30:42 GMT',
     'Connection',
     'close' ],
  trailers: {},
  rawTrailers: [],
  _pendings: [],
  _pendingIndex: 0,
  upgrade: false,
  url: '',
  method: null,
  statusCode: 200,
  statusMessage: 'OK',
  client: 
   { _connecting: false,
     _hadError: false,
     _handle: null,
     _parent: null,
     _host: 'localhost',
     _readableState: 
      { objectMode: false,
        highWaterMark: 16384,
        buffer: [],
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        defaultEncoding: 'utf8',
        ranOut: false,
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null,
        resumeScheduled: false },
     readable: false,
     domain: null,
     _events: 
      { end: [Object],
        finish: [Function: onSocketFinish],
        _socketEnd: [Function: onSocketEnd],
        free: [Function: onFree],
        close: [Object],
        agentRemove: [Function: onRemove],
        drain: [Function: ondrain],
        error: [Object] },
     _maxListeners: 0,
     _writableState: 
      { objectMode: false,
        highWaterMark: 16384,
        needDrain: false,
        ending: true,
        ended: true,
        finished: true,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: false,
        bufferProcessing: false,
        onwrite: [Function],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: true,
        errorEmitted: false },
     writable: false,
     allowHalfOpen: false,
     destroyed: true,
     bytesRead: 3690,
     _bytesDispatched: 59,
     _pendingData: null,
     _pendingEncoding: '',
     parser: null,
     _httpMessage: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: true,
        _hangupClose: false,
        _headerSent: true,
        socket: [Circular],
        connection: [Circular],
        _header: 'GET / HTTP/1.1\r\nhost: localhost:3000\r\nConnection: close\r\n\r\n',
        _headers: [Object],
        _headerNames: [Object],
        agent: [Object],
        socketPath: undefined,
        method: 'GET',
        path: '/',
        parser: null,
        res: [Circular] },
     read: [Function],
     _consuming: true,
     _idleNext: null,
     _idlePrev: null,
     _idleTimeout: -1 },
  _consuming: true,
  _dumped: false,
  req: 
   { domain: null,
     _events: 
      { socket: [Object],
        response: [Function],
        error: [Function],
        drain: [Function] },
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     writable: true,
     _last: true,
     chunkedEncoding: false,
     shouldKeepAlive: false,
     useChunkedEncodingByDefault: false,
     sendDate: false,
     _removedHeader: {},
     _hasBody: true,
     _trailer: '',
     finished: true,
     _hangupClose: false,
     _headerSent: true,
     socket: 
      { _connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 0,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        destroyed: true,
        bytesRead: 3690,
        _bytesDispatched: 59,
        _pendingData: null,
        _pendingEncoding: '',
        parser: null,
        _httpMessage: [Circular],
        read: [Function],
        _consuming: true,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     connection: 
      { _connecting: false,
        _hadError: false,
        _handle: null,
        _parent: null,
        _host: 'localhost',
        _readableState: [Object],
        readable: false,
        domain: null,
        _events: [Object],
        _maxListeners: 0,
        _writableState: [Object],
        writable: false,
        allowHalfOpen: false,
        destroyed: true,
        bytesRead: 3690,
        _bytesDispatched: 59,
        _pendingData: null,
        _pendingEncoding: '',
        parser: null,
        _httpMessage: [Circular],
        read: [Function],
        _consuming: true,
        _idleNext: null,
        _idlePrev: null,
        _idleTimeout: -1 },
     _header: 'GET / HTTP/1.1\r\nhost: localhost:3000\r\nConnection: close\r\n\r\n',
     _headers: { host: 'localhost:3000' },
     _headerNames: { host: 'host' },
     agent: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: [Object],
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     socketPath: undefined,
     method: 'GET',
     path: '/',
     parser: null,
     res: [Circular] },
  request: 
   { domain: null,
     _events: 
      { error: [Function],
        complete: [Function],
        pipe: [Function],
        end: [Object],
        data: [Function] },
     _maxListeners: undefined,
     callback: [Function],
     uri: 
      { protocol: 'http:',
        slashes: true,
        auth: null,
        host: 'localhost:3000',
        port: '3000',
        hostname: 'localhost',
        hash: null,
        search: null,
        query: null,
        pathname: '/',
        path: '/',
        href: 'http://localhost:3000/' },
     readable: true,
     writable: true,
     _qs: 
      { request: [Circular],
        lib: [Object],
        useQuerystring: undefined,
        parseOptions: {},
        stringifyOptions: {} },
     _auth: 
      { request: [Circular],
        hasAuth: false,
        sentAuth: false,
        bearerToken: null,
        user: null,
        pass: null },
     _oauth: { request: [Circular], params: null },
     _multipart: 
      { request: [Circular],
        boundary: 'be28bf43-279b-4bcb-baa9-aeab0fafb787',
        chunked: false,
        body: null },
     _redirect: 
      { request: [Circular],
        followRedirect: true,
        followRedirects: true,
        followAllRedirects: false,
        allowRedirect: [Function],
        maxRedirects: 10,
        redirects: [],
        redirectsFollowed: 0,
        removeRefererHeader: false },
     _tunnel: 
      { request: [Circular],
        proxyHeaderWhiteList: [Object],
        proxyHeaderExclusiveList: [] },
     headers: {},
     setHeader: [Function],
     hasHeader: [Function],
     getHeader: [Function],
     removeHeader: [Function],
     method: 'GET',
     localAddress: undefined,
     pool: {},
     dests: [],
     __isRequestRequest: true,
     _callback: [Function],
     proxy: null,
     tunnel: undefined,
     setHost: true,
     originalCookieHeader: undefined,
     _disableCookies: true,
     _jar: undefined,
     port: '3000',
     host: 'localhost',
     path: '/',
     httpModule: 
      { IncomingMessage: [Object],
        METHODS: [Object],
        OutgoingMessage: [Object],
        ServerResponse: [Object],
        STATUS_CODES: [Object],
        Agent: [Object],
        globalAgent: [Object],
        ClientRequest: [Object],
        request: [Function],
        get: [Function],
        _connectionListener: [Function: connectionListener],
        Server: [Object],
        createServer: [Function],
        Client: [Function: deprecated],
        createClient: [Function: deprecated] },
     agentClass: { [Function: Agent] super_: [Object], defaultMaxSockets: Infinity },
     agent: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        defaultPort: 80,
        protocol: 'http:',
        options: [Object],
        requests: {},
        sockets: [Object],
        freeSockets: {},
        keepAliveMsecs: 1000,
        keepAlive: false,
        maxSockets: Infinity,
        maxFreeSockets: 256 },
     _started: true,
     href: 'http://localhost:3000/',
     req: 
      { domain: null,
        _events: [Object],
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        writable: true,
        _last: true,
        chunkedEncoding: false,
        shouldKeepAlive: false,
        useChunkedEncodingByDefault: false,
        sendDate: false,
        _removedHeader: {},
        _hasBody: true,
        _trailer: '',
        finished: true,
        _hangupClose: false,
        _headerSent: true,
        socket: [Object],
        connection: [Object],
        _header: 'GET / HTTP/1.1\r\nhost: localhost:3000\r\nConnection: close\r\n\r\n',
        _headers: [Object],
        _headerNames: [Object],
        agent: [Object],
        socketPath: undefined,
        method: 'GET',
        path: '/',
        parser: null,
        res: [Circular] },
     ntick: true,
     response: [Circular],
     originalHost: 'localhost:3000',
     originalHostHeaderName: 'host',
     responseContent: [Circular],
     _destdata: true,
     _ended: true,
     _callbackCalled: true },
  toJSON: [Function: responseToJSON],
  caseless: 
   { dict: 
      { 'x-powered-by': 'Express',
        'accept-ranges': 'bytes',
        'cache-control': 'public, max-age=0',
        'last-modified': 'Sun, 12 Jul 2015 05:58:10 GMT',
        etag: 'W/"d49-14e80d799b1"',
        'content-type': 'text/html; charset=UTF-8',
        'content-length': '3401',
        date: 'Sun, 12 Jul 2015 14:30:42 GMT',
        connection: 'close' } },
  read: [Function],
  body: '\r\n<html lang="en">\r\n<head>\r\n  <meta charset="utf-8">\r\n  <meta http-equiv="X-UA-Compatible" content="IE=edge">\r\n  <meta name="viewport" content="width=device-width, initial-scale=1">\r\n  <!-- The above 3 meta tags *must* come first in the head; any other head content must come *after* these tags -->\r\n  <meta name="description" content="">\r\n  <meta name="author" content="">\r\n  <link rel="icon" href="/favicon.ico">\r\n\r\n  <title>Course Notifyer</title>\r\n\r\n  <!-- Bootstrap core CSS -->\r\n  <link href="/css/bootstrap.min.css" rel="stylesheet">\r\n  <!-- Bootstrap theme -->\r\n  <link href="/css/bootstrap-theme.min.css" rel="stylesheet">\r\n\r\n  <!-- Custom styles for this template -->\r\n  <link href="theme.css" rel="stylesheet">\r\n\r\n  <!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries -->\r\n<!--[if lt IE 9]>\r\n<script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"></script>\r\n<script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"></script>\r\n<![endif]-->\r\n</head>\r\n\r\n<body role="document">\r\n\r\n  <!-- Fixed navbar -->\r\n  <nav class="navbar navbar-inverse navbar-fixed-top">\r\n    <div class="container">\r\n      <div class="navbar-header">\r\n        <button type="button" class="navbar-toggle collapsed" data-toggle="collapse" data-target="#navbar" aria-expanded="false" aria-controls="navbar">\r\n          <span class="sr-only">Toggle navigation</span>\r\n          <span class="icon-bar"></span>\r\n          <span class="icon-bar"></span>\r\n          <span class="icon-bar"></span>\r\n        </button>\r\n        <a class="navbar-brand" href="#">Course Notifyer</a>\r\n      </div>\r\n    </div>\r\n  </nav>\r\n\r\n  <div class="container theme-showcase" role="main" style="padding-top:100px">\r\n\r\n    \r\n    <h1>Want to be notified when a spot opens up in your ideal class?</h1>\r\n    <br>\r\n    <br>\r\n\r\n    <form>\r\n      <div class="form-group">\r\n        <label for="urlEntry">Course URL</label> \r\n        <span id="urlStatusLabel" class="label label-default" style="visibility: hidden;"></span>\r\n        <span id="urlStatusDetails" style="visibility: hidden;"></span>\r\n        <input type="url" class="form-control" id="urlEntry" placeholder="URL" onkeydown="onURLChange(this)" onchange="onURLChange(this)" oninput="onURLChange(this)" onpaste="onURLChange(this)">\r\n        <a target="_blank" href="https://wl11gp.neu.edu/udcprod8/bwckctlg.p_disp_listcrse?term_in=201610&subj_in=ECON&crse_in=1116&schd_in=LEC">Example 1</a>\r\n        <a target="_blank" href="https://wl11gp.neu.edu/udcprod8/bwckschd.p_disp_detail_sched?term_in=201610&crn_in=10827">Example 2</a>\r\n      </div>\r\n      <div class="form-group">\r\n        <label for="exampleInputPassword1">Email</label>\r\n        <input type="password" class="form-control" id="exampleInputPassword1" placeholder="Email">\r\n      </div>\r\n\r\n      <button type="submit" class="btn btn-default">Submit</button>\r\n    </form>\r\n\r\n\r\n  </div> <!-- /container -->\r\n\r\n\r\n\r\n\r\n\r\n    <!-- Bootstrap core JavaScript\r\n    ================================================== -->\r\n    <!-- Placed at the end of the document so the pages load faster -->\r\n    <script src="/js/jquery.min.js"></script>\r\n    <script src="/js/script.js"></script>\r\n    <script src="/js/bootstrap.min.js"></script>\r\n    <!-- IE10 viewport hack for Surface/desktop Windows 8 bug -->\r\n    <script src="/js/ie10-viewport-bug-workaround.js"></script>\r\n\r\n\r\n  </body></html>\r\n' }
